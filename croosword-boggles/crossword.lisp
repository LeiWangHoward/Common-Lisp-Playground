(defun pattern-words (word trie)
  (reverse (pattern-words-help word trie)))

(defun pattern-words-help(word trie)
  (let((lst nil)(letter(elt word 0))(rest(subseq word 1)))
    (cond((equal rest "")
          (when(equal #\? letter)
            (loop for key being the hash-keys of(trie-b trie)using(hash-value value)
                  do(when(trie-wd value)(push(trie-wd value)lst))))
          (when(gethash letter (trie-b trie))
            (push(trie-wd(gethash letter (trie-b trie)))lst)))
          ((equal #\? letter )
           (loop for key being the hash-keys of(trie-b trie)using(hash-value value)
                 do(setf lst(nconc(pattern-words-help rest value)lst))))
          ((gethash letter (trie-b trie))
           (setf lst(pattern-words-help rest (gethash letter (trie-b trie)))))
          (t nil))
    lst))

(defun pattern-words-help(word trie)
  (let((lst nil)(letter(elt word 0))(rest(subseq word 1)))
    (cond((equal rest "")
          (common(when(trie-wd value)
                   (push(trie-wd value)lst))
                  (push(trie-wd(gethash letter (trie-b trie)))lst)))
          (t(common(setf lst(nconc(pattern-words-help rest value)lst))
                    (setf lst(pattern-words-help rest (gethash letter (trie-b trie)))))))
    lst))

(defmacro common(sentence1 sentence2)
  `(progn
     (when(eql #\? letter)
       (loop for key being the hash-keys of(trie-b trie)using(hash-value value)
           do ,sentence1))
     (when (gethash letter (trie-b trie))
       ,sentence2)))
