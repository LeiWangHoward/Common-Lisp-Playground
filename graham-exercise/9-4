(defun intersect-segments (x1 y1 x2 y2 x3 y3 x4 y4)
  (let ((dx1 (- x2 x1))
        (dy1 (- y2 y1))
        (dx2 (- x4 x3))
        (dy2 (- y4 y3))
        (dx3 (- x3 x1))
        (dy3 (- y3 y1)))
    (let ((d (- (* dx1 dy2) (* dx2 dy1))))
      (unless (= d 0)
        (let ((k1 (/ (- (* dx3 dy2) (* dx2 dy3)) d))
              (k2 (/ (- (* dx3 dy1) (* dx1 dy3)) d)))
          (if (and (<= 0 k1 1) (<= 0 k2 1))
              (cons (+ x1 (* dx1 k1)) (+ y1 (* dy1 k1)))))))))

(defun distance (x1 y1 x2 y2)
  (let ((dx (- x2 x1))
        (dy (- y2 y1))
        (d )
